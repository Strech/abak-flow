{"name":"abak-flow","tagline":"Abak-press github + gitflow flow","body":"Abak-flow\r\n=========\r\nНет, это не новая идеология ведения разработки в проекте, это всего лишь набор утилит которые помогают связать использование [git-flow](https://github.com/nvie/gitflow) и [github flow](http://scottchacon.com/2011/08/31/github-flow.html)\r\n\r\n**Начиная с версии v0.2.1 используется авторизация OAuth2. [Как ей пользоваться?](https://github.com/Strech/abak-flow/wiki/How-start-work-with-new-abak-flow)**\r\n\r\n**Начиная с версии v1.0.0 используется новый формат конфигурации. [Как мигрировать старую?](https://github.com/Strech/abak-flow/wiki/How-start-work-with-abak-flow-v1.0.0)**\r\n\r\n**Начиная с версии v1.1.0 используется новый формат токена для Github API. [Как обновить?](https://github.com/Strech/abak-flow/wiki/How-start-work-with-abak-flow-v1.1.0)**\r\n\r\n# Установка\r\n\r\n    $ gem install abak-flow -v '>= 1.1.0'\r\n    $ git config --global alias.request '!request'\r\n    $ git request configure\r\n    $ git remote add upstream git://github.com/GITHUB_PROJECT_USER/GITHUB_PROJECT_NAME.git\r\n\r\n### А если я использую прокси, как быть?\r\n\r\nПри конфигурации вас спросят о прокси сервере. Если его нет, оставьте поле пустым\r\n\r\nДалее по приоритету идут переменные окружения. Сначала **http_proxy**, затем **HTTP_PROXY**\r\n\r\nТ.е если вы используете переменные окружения, то просто не указывайте прокси в конфиге\r\n\r\n---\r\n\r\n**Важно:** Пароль никогда и нигде не будет сохранен. Он [будет использован](https://developer.github.com/v3/#basic-authentication) для создания персонального токена\r\n\r\n**Заметьте:** При конфигурации необходимо указать email адрес под которым вы заходите на github\r\n\r\n**Обратите внимание:** В данном контексте под **upstream** подразумевается адрес репозитория в который будут оформляться пул реквесты. А репозиторием **origin** будет являться ваш форк\r\n\r\n# С чего начать?\r\n\r\n    $ git request checkup\r\n\r\nили\r\n\r\n    $ git request help\r\n\r\n**Примечание:** Вообще-то все комманды поддерживают опцию `--help`, но вот именно `git request --help` успевает перехватиться самим git и он конечно неодумевает как ему показать хэлп по внешней комманде\r\n\r\n# Список команд\r\n\r\n    $ git request configure\r\n    $ git request checkup\r\n    $ git request compare [--base <имя ветки>] [--head <имя ветки>]\r\n    $ git request publish [--base <имя ветки>] [--head <имя ветки>] [--title <заголовок>] [--body <описание>]\r\n    $ git request done\r\n\r\n## А помощь?\r\nМногие команды имеют какие-то дополнительные опции. Но они нужны только в экзотических случаях. Но при любом раскладе подсказку и тонкий намек всегда можно получить воспользовавших такой командой:\r\n\r\n    $ git request publish --help\r\n\r\n# В заключении\r\nДанный репозиторий и изложенные в нем идеи ни в коем случае не претендуют на идеал и совершенство. Это всего лишь узко заточенная комбинация гемов\r\n\r\n## Лицензия\r\n\r\nAbak-flow выпускается под лицензией [MIT](http://www.opensource.org/licenses/MIT).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}