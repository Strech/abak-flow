{"name":"abak-flow","tagline":"Abak-press github + gitflow flow","body":"Abak-flow\r\n=========\r\nНет, это не новая идеология ведения проекта, это всего лишь набор утилит которые помогают связать использование [git-flow](https://github.com/nvie/gitflow) и [github flow](http://scottchacon.com/2011/08/31/github-flow.html)\r\n\r\n**Начиная с версии v0.2.1 используется авторизация OAuth2. [Как ей пользоваться?](https://github.com/Strech/abak-flow/wiki/How-start-work-with-new-abak-flow)**\r\n\r\n**Начиная с версии v1.0.0 используется новый формат конфигурации. [Как мигрировать старую?](https://github.com/Strech/abak-flow/wiki/How-start-work-with-abak-flow-v1.0.0)**\r\n\r\n# Концепция\r\nИдеология git-flow использует следующий набор веток:\r\n\r\n* *master* - всегда пригодна для развертывания\r\n* *develop* - основная ветка разработки\r\n* *hotfix* - ветка для изменений которые попадут на продакшен сервер\r\n* *feature* - ветки для крупных задач\r\n\r\nGithub-flow же наоборот ведет основную разработку в ветке master, но при этом master является пригодным для развертывания в любой момент.\r\n\r\nПосле долгих раздумий было принято применить следующий набор правил, для разработки на github:\r\n\r\n1. Вся разработка любой задачи и функционала ведется только в ветках **feature**\r\n2. Разработаный функционал из ветки **feature** оформляется pull request только в ветку **develop**\r\n3. Все исправления ошибок, которые должны попасть на продакшен сервер делаются только в ветках **hotfix**\r\n4. Исправленные ошибки из ветки **hotfix** фофрмляются pull request только в ветку **master**\r\n5. После получения исправлений на текущий момент в репозитории инициируется merge ветки **master** в **develop**\r\n\r\n# Установка\r\n\r\n    $ gem install abak-flow -v 1.0.0\r\n    $ git config --global alias.request '!request'\r\n    $ git config --global abak-flow.oauth-user YOUR_GITHUB_MAIL@gmail.com\r\n    $ git config --global abak-flow.oauth-token 0123456789YOUR_GITHUB_API_TOKEN\r\n    $ git remote add upstream git://github.com/GITHUB_PROJECT_USER/GITHUB_PROJECT_NAME.git\r\n    \r\n*А если я использую прокси, как быть?*\r\n\r\n    $ git config --global abak.proxy http://my-proxy.com:3129\r\n    \r\nДалее по приоритету идут переменные окружения. Сначала **http_proxy**, затем **HTTP_PROXY**\r\n\r\nТ.е если вы используете переменные окружения, то просто не указывайте прокси в конфиге\r\n\r\n---\r\n\r\n**Заметьте:** В конфиге git, значением *abak.oauth-user* должен являться тот email адрес, под которым вы заходите на github\r\n\r\n**Обратите внимание:** В данном контексте под **upstream** подразумевается адрес репозитория в который будут оформляться pull request. А репозиторием **origin** будет являться ваш форк \r\n\r\n# С чего начать?\r\n\r\n    $ git request checkup\r\n\r\nили\r\n    \r\n    $ git request help\r\n    \r\n**Примечание:** Вообще-то все комманды поддерживают опцию *--help*, но вот именно *git request --help* успевает перехватиться самим git и он конечно неодумевает как ему показать хэлп по внешней комманде\r\n\r\n# Примеры использования\r\n### Самый простой способ начать новую задачу:\r\n\r\n    $ git checkout develop\r\n    $ git flow feature start 'TASK-001'\r\n    $ touch 'hello.txt' && echo 'Hello world!' > hello.txt\r\n    $ git commit -a -m 'Hello world commit'\r\n    $ git request publish\r\n\r\n**Внимание:** Не нужно называться ветку TASK. Используйте префикс задачь из jira\r\n\r\n## Маленькие хитрости\r\nЕсли сразу правильно именовать ветки, т.е ветку с задачей создавать с именем, такого формата TASK-001, то, в описание pull request автоматически вставится ссылка на задачу в jira, а в имя pull request сразу вставится название, состоящее из имени задачи, т.е TASK-001\r\n\r\nЕсли делать реквест из ветки не соответствующей формату TASK-001, то в название подставится последний commit message. Если вы считаете, что нужно указать, что-то другое - всегда можно воспользоваться опцией `--title`\r\n\r\n## А помощь?\r\nМногие команды имеют какие-то дополнительные опции. Но они нужны только в экзотических случаях. Но при любом раскладе подсказку и тонкий намек всегда можно получить воспользовавших такой командой:\r\n\r\n    $ git request publish --help\r\n\r\n# В заключении\r\nДанный репозиторий и изложенные в нем идеи ни в коем случае не претендуют на идеал и совершенство. Это всего лишь узко заточенная комбинация гемов\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}